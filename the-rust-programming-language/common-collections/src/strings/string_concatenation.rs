pub fn concatenate_basic_string() {
    let s1 = String::from("Hello, ");
    let s2 = String::from("world!");
    let s3 = s1 + &s2; // note s1 has been moved here and can no longer be used

    // This won't work because s1 is no longer valid in this scope
    // println!("s1 is {s1}");
    println!("s2 is {s2}");
    println!("s3 is {s3}");
}

pub fn concatenate_multiple_strings() {
    // Using `+` operator
    let s1 = String::from("tic");
    let s2 = String::from("tac");
    let s3 = String::from("toe");

    // let concatenated_with_plus_operator = s1 + "-" + &s2 + "-" + &s3;
    // println!("Concatenate using `+` operator: {concatenated_with_plus_operator}");

    // Using format! macro
    // The format! macro works like println!, but instead of printing the output to the screen, it returns a String with the contents.
    // The version of the code using format! is much easier to read, and the code generated by the format! macro uses references so that this call doesn’t take ownership of any of its parameters.
    let concatenated_with_format_macro = format!("{s1}-{s2}-{s3}");
    println!("Concatenate using format! macro: {concatenated_with_format_macro}");
}
