# Use the official Rust image as the base image for the build stage
FROM rust:1.84-alpine3.20 AS chef
USER root

# Install necessary packages and cargo-chef
RUN apk add --no-cache musl-dev && cargo install cargo-chef
WORKDIR /microservices-with-rust

# Use the chef stage to prepare the build plan
FROM chef AS planner
COPY . .
RUN cargo chef prepare --recipe-path recipe.json

# Use the chef stage to build the dependencies and the application
FROM chef AS builder
COPY --from=planner /microservices-with-rust/recipe.json recipe.json
# Build dependencies - this is the caching Docker layer!
RUN cargo chef cook --release --recipe-path recipe.json
# Install protoc for building the application
RUN apk add --no-cache protoc
COPY . .
# Build the application binary
RUN cargo build --release --bin auth

# Use a minimal Debian image for the runtime stage
FROM debian:buster-slim AS runtime
WORKDIR /microservices-with-rust
# Copy the built binary from the builder stage
COPY --from=builder /microservices-with-rust/target/release/auth /usr/local/bin
# Set the entrypoint to the application binary
ENTRYPOINT ["/usr/local/bin/auth"]